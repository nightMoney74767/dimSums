/**
*	Header files for this project
*/
#include <fstream>
#include <iostream>
#include <vector>
#include <random>
#include <string>
/**
*	Header files for Boost
*/
#include <boost/serialization/list.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/asio.hpp>
/**
*	Dates and times - adapted from C++ Reference (Corpus, 2008)
*/
#include <time.h>
/**
*	End of adapted code
*/
/**
*	Get DimSumClass and LeaderboardClass object definitions from header files
*/
#include "DimSum.h"
#include "Leaderboard.h"
/**
*	Namespaces for standard library and Boost
*/
using namespace std;
using namespace boost;
using asio::ip::tcp;

int playGame(vector<int>& chosenDimSumValues, int& targetSum, int& difficulty) {
	/**
	*	Prompt user to answer a question by selecting two of the chosen Dim Sums they think add up to the target number
	*	@param chosenDimSumValues as vector of integers - Dim Sums that were chosen in the chooseDimSums function (in server)
	*	@param targetSum as integer - this is the target number chosen by the function chooseCorrectSum (in server)
	*	@param numOfClues as integer - this is set to 4, 6 or 8 depending on difficulty
	*	@return an integer of 1 if the user guesses correctly
	*	@return an integer of 0 if the user guesses incorrectly
	* 
	*	Time complexity:
	*	-	the code in the two while loops occur n times (resulting in linear time or O(n))
	*	-	the code that follows until the retruns statement occurs once (resulting in linear time or O(n))
	*	-	therefore, the O notation for both while loops is 2(O(n))
	*/
	std::cout << "Your target sum and Dim Sums have been generated by the server" << endl;
	int input1;
	int input2;
	while (true) {
		std::cout << "Please enter your first answer using the numbers allocated to each clue displayed on the server: ";
		cin >> input1;
		if (input1 <= difficulty && input1 > 0) {
			break;
		}
	}
	while (true) {
		std::cout << "Please enter your second answer using the numbers allocated to each clue displayed on the server ";
		cin >> input2;
		if (input2 <= difficulty && input2 > 0) {
			break;
		}
	}
	/**
	*	Get the values of each Dim Sum that the user has chosen
	*/
	int value1 = chosenDimSumValues[input1 - 1];
	int value2 = chosenDimSumValues[input2 - 1];
	/**
	*	Check if the user has entered the correct answers
	*/
	if ((value1 + value2) == targetSum) {
		std::cout << "Correct" << endl;
		return 1;
	}
	else {
		std::cout << "Incorrect" << endl;
		return 0;
	}
}

void getLeaderboard(LeaderboardClass& newRecord) {
	/**
	*	Output and export a leaderboard of all gameplay sessions which is sorted by scores
	*	@param newRecord as LeaderBoardClass object - this is a newly added record for the user which stores the following
	*	-	name
	*	-	score
	*	-	the date in which the game was played
	*	
	*	Time complexity:
	*	-	all code before the first for loop occurs once (constant time or O(1))
	*	-	the first for loop occurs n times (depending on how many leaderboard entries are recorded). This resultis in linear time or O(n)
	*	-	the code that follows the for loop until the end of the function occurs once
	*	-	O notation: 2(O(1)) + O(n)
	*/
	/**
	*	Import data from Boost file
	*/
	list<LeaderboardClass> leaderboard;
	try {
		ifstream in("leaderboardFile.txt");
		archive::text_iarchive arch(in);
		arch >> leaderboard;
	}
	catch (std::exception e) {
		cerr << e.what();
	}
	/**
	*	Add new record to leaderboard
	*/
	leaderboard.push_back(newRecord);
	int i = 1;
	/**
	*	Import data from Boost file
	*	Sort leaderboard. Adapted from C++ Reference (coder777, 2016)
	*/
	leaderboard.sort();
	/**
	*	End of adapted code
	*/
	/**
	*	Reverse the order of the leaderboard (so that it displays scored from highest first). Adapted from C++ Refernece (std::list::reverse, 2021)
	*/
	leaderboard.reverse();
	/**
	*	End of adapted code
	*/
	/**
	*	Output leaderboard
	*/
	std::cout << "Leaderboard:" << endl;
	std::cout << "Game Number, Username, Score, Date Played" << endl;
	for (LeaderboardClass instance : leaderboard) {
		std::cout << i << ", " << instance.getName() << ", " << instance.getScore() << ", " << instance.getDate() << endl;
		i++;
	}
	/**
	*	Export leaderboard to Boost file, including the new record
	*/
	{
		ofstream out("leaderboardFile.txt");
		archive::text_oarchive arch(out);
		arch << leaderboard;
		std::cout << "Exported contents to Boost" << endl;
	}
}

void addRecord(int& score) {
	/**
	*	Create a LeaderBoardClass object by storing username, score and current date
	*	@param score as integer - this is the number of correct answers the user has entered
	*
	*	Time complexity:
	*	-	the code in this function occur once (resulting in constant time or O(1))
	*/
	LeaderboardClass newRecord;
	std::cout << "Please enter your username" << endl;
	string name;
	cin >> name;
	newRecord.setName(name);
	newRecord.setScore(score);
	/**
	*	Dates and times code adapted from C++ Reference (Corpus, 2008)
	*/
	char date[9];
	_strdate_s(date);
	newRecord.setDate(date);
	/**
	*	End of adapted code
	*/
	getLeaderboard(newRecord);
}

int chooseDifficulty() {
	/**
	*	Choose the difficulty of the game (this determines how many clues to output)
	* 
	*	Prompt the user to choose a difficulty by entering a number as follows
	*	-	1 for easy (4 clues)
	*	-	2 for medium (6 clues)
	*	-	3 for hard (8 clues)
	* 
	*	Repeat if the user has entered any other input
	*	@return an integer with value of 4 if the user has chosen the easy difficulty
	*	@return an integer with value of 6 if the user has chosen the medium difficulty
	*	@return an integer with value of 8 if the user has chosen the hard difficulty
	* 
	*	Time complexity:
	*	-	this function occurs n times (due to the while loop preventing invalid inputs). This resultins in linear time or O(n)
	*	-	the code within the if statements always occurs once (O(1))
	*	-	O notation: O(n) + O(1)
	*/
	string input;
	while (true) {
		input = "0";
		std::cout << "" << endl;
		std::cout << "Please choose a difficulty as follows:" << endl;
		std::cout << "1 = Easy (4 clues)" << endl;
		std::cout << "2 = Medium (6 clues)" << endl;
		std::cout << "3 = Easy (8 clues)" << endl;
		cin >> input;
		if (input == "1") {
			return 4;
		}
		else if (input == "2") {
			return 6;
		}
		else if (input == "3") {
			return 8;
		}
		else {
			input = "0";
		}
	}
}

int sendNumOfClues(int& numOfClues) {
	/**
	*	Connect to the server which asks questions
	* 
	*	Send an integer to the server based on difficulty
	*	@param numOfClues as integer numOfClues as integer - this is set to 4, 6 or 8 depending on difficulty
	*	@return an integer of 0
	* 
	*	Time complexity:
	*	-	the code in this function occurs once (resulting in constant time or O(1))
	*/
	tcp::iostream serverStream("127.0.0.1", "7000");
	serverStream << int(numOfClues);
	return 0;
}

int getTargetSum() {
	/**
	*	Get target sum from server
	*	@return targetSum as integer - this is the target number chosen by the function chooseCorrectSum (in server)
	* 
	*	Time complexity:
	*	-	the code in this function occurs once (resulting in constant time or O(1))
	*/
	asio::io_service ios;
	tcp::endpoint endpoint(tcp::v4(), 7001);
	tcp::acceptor acceptor(ios, endpoint);
	tcp::iostream clientStream;
	acceptor.accept(*clientStream.rdbuf());
	int targetSum;
	clientStream >> targetSum;
	return targetSum;
}

int getChosenValue() {
	/**
	*	Get the values of the chosen Dim Sums from the server
	*	@return newValue as integer - this is the value obtained from the server (one-by-one)
	* 
	*	Time complexity:
	*	-	the code in this function occurs n times because multiple integers are sent by the server. This results in linear time or O(n)
	*	-	this creates a longer execution time than necessary. While it is better to send a vector of the Dim Sums chosen by the server, such vectors could not be sent directly over Boost IOStreams
	*/
	asio::io_service ios;
	tcp::endpoint endpoint(tcp::v4(), 7002);
	tcp::acceptor acceptor(ios, endpoint);
	tcp::iostream clientStream;
	acceptor.accept(*clientStream.rdbuf());
	int newValue;
	clientStream >> newValue;
	return newValue;
}

vector<int> getChosenDimSums(int& numOfClues) {
	/**
	*	Send a string to the server. The string gives a specifc instruction
	* 
	*	If the string is:
	*	-	"start" then the server asks a question and the client answers
	*	-	"stop" then the server exits and the leaderboard functionality is executed by the client
	* 
	*	@param numOfClues as integer - this is set to 4, 6 or 8 depending on difficulty
	*	@retrun returnVector as a vector of integers
	* 
	*	Time complexity:
	*	-	the code before the while loop occurs once (constant time or O(1))
	*	-	the code in the while loop occurs n times (4, 6 or 8 times depending on difficulty), resulting in linear time or O(n)
	*	-	O notation: O(1) + O(n)
	*/
	vector<int> returnVector;
	std::cout << "" << endl;
	std::cout << "Please wait..." << endl;
	/**
	*	Get the Dim Sum values from the server
	*/
	while (returnVector.size() != numOfClues) {
		int newValue = getChosenValue();
		returnVector.push_back(newValue);
		if (returnVector.size() == numOfClues) {
			break;
		}
	}
	return returnVector;
}

int connectOrDisconnect(string connect) {
	/**
	*	Send a string to the server. The string gives a specifc instruction
	* 
	*	If the string is:
	*		"start" then the server asks a question and the client answers
	*		"stop" then the server exits and the leaderboard functionality is executed by the client
	*	@param connect as string - a string that contains the instruction string as described above
	*	@return an integer of 0
	* 
	*	Time complexity:
	*	-	the code in this function occurs once (resulting in constant time or O(1))
	*/
	tcp::iostream connectStream("127.0.0.1", "7003");
	connectStream << string(connect);
	return 0;
}

int main() {
	/**
	*	This file contains the code for the client. This should be executed after running the server. To run this file in Visual Studio:
	*	-	right-click the client project file
	*	-	select debug then start new instance
	*
	*	Please note that the following folders have been included in the client and server projects, granting the use of Boost:
	*	-	Additional Include Directories: C:\Users\jclif\Documents\Extracted Apps\Boost\boost_1_77_0
	*	-	Additional Include Library Directories: C:\Users\jclif\Documents\Extracted Apps\Boost\boost_1_77_0\stage\lib
	*	These folders link to a copy of Boost downloaded via ZIP file (later extracted) to the Documents folder allocated to a Windows account. For this reason, this solution may not run on other devices
	*
	*	You may wish to change the directories if needed using the following steps (where <Project Name> is the name of the client and server projects - these are called Server and Client respectively)
	*	-	to modify the Additional Include Directories, go to Project in the menu bar, select <Project Name> Properties and choose C/C++ in the window that appears
	*	-	to modify the Additional Include Library Directories, go to Project in the menu bar, select <Project Name> Properties and choose Linker in the window that appears
	*
	*	***
	* 
	*	This function calls other functions in this file
	* 
	*	Time complexity:
	*	-	the code before the while loop occurs once
	*	-	the code in the while loop occurs n times (as players can play repeated Dim Sum questions). This results in linear time or O(n)
	*	
	*	Note that the while loop calls other functions
	* 
	*	Some of the code in these functions execute multiple times (causing linear time or O(n))
	* 
	*	Therefore, the O notation for the main function could be O(n^2) at minimum or O(n^5) at the maximum. As the algorithmic complexity increases, the growth of data (e.g. inputs) increases more rapidly
	*/
	std::cout << "This is the Client" << endl;
	/**
	*	Set the following colours for this project. This allows the player to identify which program is the server and which is the client (when both are running). Code adapted from C++ Reference (rcast, 2013)
	*	-	background: 0 (black)
	*	-	foreground (text): e (light yellow)
	*/
	std::system("color 0e");
	/**
	*	End of adapted code
	*/
	/**
	*	Select difficulty and determine number of clues to output
	*/
	int numOfClues = chooseDifficulty();
	int currentScore = 0;
	while (true) {
		/**
		*	Initiate connection to server. The server will then react to this and begin executing its code
		*/
		std::cout << "Sending startup string to the server..." << endl;
		connectOrDisconnect("start");
		/**
		*	Play and repeat the game until the user chooses to quit
		*	All vectors are passed into functions by a reference for the purposes of memory management
		*	Send an integer to the server based on difficulty
		*/
		sendNumOfClues(numOfClues);
		/**
		*	Get target sum from server
		*/
		int targetSum = getTargetSum();
		/**
		*	Get chosen Dim Sums from the server
		*/
		vector<int> chosenDimSumValues = getChosenDimSums(numOfClues);
		/**
		*	Ask for two inputs to answer the generated question. Pass in the Dim Sums vector and target number. Get the outcome of the question determined by return values
		*/
		int result = playGame(chosenDimSumValues, targetSum, numOfClues);
		/**
		*	If the user answers a question correct, give them a point
		*/
		if (result == 1) {
			currentScore += 1;
		}
		/**
		*	Ask if the game should be repeated. Exit the game if the user enters 0
		*/
		std::cout << "Would you like to play an additional round? (type 0 to exit) ";
		string repeat = "0";
		cin >> repeat;
		if (repeat == "0") {
			std::cout << "" << endl;
			std::cout << "You scored " << currentScore << " points" << endl;
			addRecord(currentScore);
			std::cout << "Sending stopping string to the server..." << endl;
			connectOrDisconnect("stop");
			std::cout << "This program has finished executing. You may now close this window.";
			string waitString;
			cin >> waitString;
			exit(0);
		}
	}
}